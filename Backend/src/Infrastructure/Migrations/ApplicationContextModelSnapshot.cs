// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Analysis.AnalysisDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnalysisTarget")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ArtUnionId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("CheckDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArtUnionId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AnalysisDocuments");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.ArtDirection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ArtDirections");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.ArtUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DirectionId")
                        .HasColumnType("uuid");

                    b.Property<double>("EduDuration")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ArtUnions");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtUnionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtUnionId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormControl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormExercise")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("StudyHours")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.LessonAnalyze.AnalysisCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnalysisDocumentId")
                        .HasColumnType("uuid");

                    b.Property<int>("AnalysisTarget")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("WordMark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisDocumentId");

                    b.ToTable("AnalyzeCriterions");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.LessonAnalyze.CriterionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CriterionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.ToTable("CriterionOptions");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Analysis.AnalysisDocument", b =>
                {
                    b.HasOne("EducationProcessAPI.Domain.Entities.ArtUnion", "ArtUnion")
                        .WithMany()
                        .HasForeignKey("ArtUnionId");

                    b.HasOne("EducationProcessAPI.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("EducationProcessAPI.Domain.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("ArtUnion");

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.ArtUnion", b =>
                {
                    b.HasOne("EducationProcessAPI.Domain.Entities.ArtDirection", "Direction")
                        .WithMany()
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationProcessAPI.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Union")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Group", b =>
                {
                    b.HasOne("EducationProcessAPI.Domain.Entities.ArtUnion", "ArtUnion")
                        .WithMany("Groups")
                        .HasForeignKey("ArtUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtUnion");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("EducationProcessAPI.Domain.Entities.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.LessonAnalyze.AnalysisCriteria", b =>
                {
                    b.HasOne("Domain.Entities.Analysis.AnalysisDocument", null)
                        .WithMany("SelectedCriterias")
                        .HasForeignKey("AnalysisDocumentId");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.LessonAnalyze.CriterionOption", b =>
                {
                    b.HasOne("EducationProcessAPI.Domain.Entities.LessonAnalyze.AnalysisCriteria", "Criterion")
                        .WithMany("Options")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");
                });

            modelBuilder.Entity("Domain.Entities.Analysis.AnalysisDocument", b =>
                {
                    b.Navigation("SelectedCriterias");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.ArtUnion", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Group", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.LessonAnalyze.AnalysisCriteria", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("EducationProcessAPI.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Union");
                });
#pragma warning restore 612, 618
        }
    }
}
